#define _POSIX_C_SOURCE 200809L
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <unistd.h>

#include "msgs.h"
#define BUFFER_SIZE 256

int main() {
  // TODO: Make this so it's not a forever loop
  while (true) {
    char buffer[BUFFER_SIZE];

    // write command line prompt
    write(STDOUT_FILENO, "currentdirectoryplaceholder", 27);

    // read input from user
    ssize_t bytes_read = read(STDIN_FILENO, buffer, BUFFER_SIZE - 1);

    // read returns -1 upon error, perform error-check
    if (bytes_read < 0) {
      const char *msg = FORMAT_MSG("shell", READ_ERROR_MSG);
      write(STDERR_FILENO, msg, strlen(msg));
      continue;
    }

    //handle empty inputs, skip them
    if (bytes_read == 0) {
      continue;
    }

    // remove newline character
    buffer[bytes_read] = '\0';
    if (bytes_read > 0 && buffer[bytes_read - 1] == '\n') {
      // replace newline with null
      buffer[bytes_read - 1] = '\0';
      bytes_read--;
    }

    // TODO: Fix this later, make it match requirements
    if (strcmp(buffer, "exit") == 0) {
      break;
    }

    //Create array to store arguments
    char *arguments[20];
    int arg_count = 0;
    bool background = false;

    //Now, like in lab 2, use strtok_r to parse input

  }
}
